// Generated by CoffeeScript 1.6.3
var Josh;

Josh = Josh || {};

Josh.Debug = true;

Josh.config = {
  history: new Josh.History(),
  console: window.console,
  killring: new Josh.KillRing(),
  readline: null,
  shell: null,
  pathhandler: null
};

Josh.config.readline = new Josh.ReadLine(Josh.config);

Josh.config.shell = new Josh.Shell(Josh.config);

Josh.config.pathhandler = new Josh.PathHandler(Josh.config.shell, {
  console: Josh.config.console
});

console.log("[feedlyconsole] loading %O", Josh);

(function(root, $, _) {
  return Josh.FeedlyConsole = (function(root, $, _) {
    var addCommandHandler, buildExecCommandHandler, doInsertShellUI, get, getDir, getPathParts, initializationError, initialize, initializeUI, insertCSSLink, insertShellUI, makeJSONNodes, makeNodes, makeRootNodes, mutationHandler, observer, simple_commands, _console, _self;
    _console = (Josh.Debug && window.console ? window.console : {
      log: function() {},
      debug: function() {}
    });
    /*
    # Console State
    # =============
    #
    # `_self` contains all state variables for the console's operation
    */

    _self = {
      shell: Josh.config.shell,
      api_version: "v3/",
      api: "unset",
      OAuth: "",
      ui: {},
      root_commands: {},
      pathhandler: Josh.config.pathhandler
    };
    /*
    # Custom Templates
    # ================
    
    # `Josh.Shell` uses *Underscore* templates for rendering output to
    # the shell. This console overrides some and adds a couple of new
    # ones for its own commands.
    */

    /*
    # **templates.prompt**
    # Override of the default prompt to provide a multi-line prompt of
    # the current user, repo and path and branch.
    */

    _self.shell.templates.prompt = _.template("<strong>\n  <%= node.path %> $\n</strong>");
    _self.shell.templates.default_template = _.template("<div><%= JSON.stringify(data) %></div>");
    _self.shell.templates.ls = _.template("<ul class='widelist'><% _.each(nodes, function(node) { %><li><%- node.name %></li><% }); %></ul><div class='clear'/>");
    _self.shell.templates.not_found = _.template("<div><%=cmd%>: <%=path%>: No such directory</div>");
    _self.shell.templates.rateLimitTemplate = _.template("<%=remaining%>/<%=limit%>");
    _self.shell.templates.profile = _.template("<div class='userinfo'>\n  <img src='<%=profile.picture%>' style='float:right;'/>\n  <table>\n    <tr>\n      <td><strong>Id:</strong></td>\n      <td><%=profile.id %></td>\n    </tr>\n    <tr><td><strong>Email:</strong></td>\n      <td><%=profile.email %></td></tr>\n    <tr><td><strong>Name:</strong></td>\n      <td><%=profile.fullName %></td></tr>\n  </table></div>");
    buildExecCommandHandler = function(command_name) {
      return {
        exec: function(cmd, args, callback) {
          return get(command_name, null, function(data) {
            var template, template_args;
            if (!data) {
              return err("api request failed to get data");
            }
            template = _self.shell.templates[command_name] || _self.shell.templates.default_template;
            template_args = {};
            template_args[command_name] = template_args["data"] = data;
            _console.debug("[Josh.FeedlyConsole] data %O cmd %O args %O", data, cmd, args);
            return callback(template(template_args));
          });
        }
      };
    };
    simple_commands = ["profile", "tags", "subscriptions", "preferences", "categories", "topics"];
    addCommandHandler = function(name, map) {
      _self.shell.setCommandHandler(name, map);
      return _self.root_commands[name] = map;
    };
    _.each(simple_commands, function(command) {
      return addCommandHandler(command, buildExecCommandHandler(command));
    });
    _self.root_commands.tags.help = "help here";
    _self.shell.onNewPrompt(function(callback) {
      return callback(_self.shell.templates.prompt({
        self: _self,
        node: _self.pathhandler.current
      }));
    });
    _self.pathhandler.getNode = function(path, callback) {
      var absolute, parts, resolved;
      _console.debug("[Josh.FeedlyConsole] looking for node at %s.", path);
      if (!path) {
        return callback(_self.pathhandler.current);
      }
      parts = getPathParts(path);
      if (parts[0] !== "") {
        parts = getPathParts(_self.pathhandler.current.path).concat(parts);
      }
      resolved = [];
      _.each(parts, function(x) {
        if (x === ".") {
          return;
        }
        if (x === "..") {
          return resolved.pop();
        } else {
          return resolved.push(x);
        }
      });
      absolute = resolved.join("/");
      _console.debug("[Josh.FeedlyConsole]path to fetch: " + absolute);
      return getDir(absolute, callback) || self.node;
    };
    _self.pathhandler.getChildNodes = function(node, callback) {
      if (node.isFile) {
        _console.debug("[Josh.FeedlyConsole] it's a file, no children %O", node);
        return callback();
      }
      if (node.children) {
        _console.debug("[Josh.FeedlyConsole] got children, let's turn them into nodes %O", node);
        return callback(makeNodes(node.children));
      }
      _console.debug("[Josh.FeedlyConsole] no children, fetch them %O", node);
      return getDir(node.path, function(detailNode) {
        node.children = detailNode.children;
        return callback(node.children);
      });
    };
    get = function(resource, args, callback) {
      var cache, cacheCallback, request, url;
      cacheCallback = function(value) {
        _self[resource] = value;
        return callback(value);
      };
      url = _self.api + resource;
      cache = _self[resource];
      if (cache) {
        return callback(cache);
      }
      if (chrome.extension === undefined) {
        switch (resource) {
          case "tags":
            return cacheCallback([
              {
                id: "user/c805fcbf-3acf-4302-a97e-d82f9d7c897f/tag/global.saved"
              }, {
                id: "user/c805fcbf-3acf-4302-a97e-d82f9d7c897f/tag/tech",
                label: "tech"
              }, {
                id: "user/c805fcbf-3acf-4302-a97e-d82f9d7c897f/tag/inspiration",
                label: "inspiration"
              }
            ]);
          case "subscriptions":
            return cacheCallback([
              {
                id: "feed/http://feeds.feedburner.com/design-milk",
                title: "Design Milk",
                categories: [
                  {
                    id: "user/c805fcbf-3acf-4302-a97e-d82f9d7c897f/category/design",
                    label: "design"
                  }, {
                    id: "user/c805fcbf-3acf-4302-a97e-d82f9d7c897f/category/global.must",
                    label: "must reads"
                  }
                ],
                sortid: "26152F8F",
                updated: 1367539068016,
                website: "http://design-milk.com"
              }, {
                id: "feed/http://5secondrule.typepad.com/my_weblog/atom.xml",
                title: "5 second rule",
                categories: [],
                sortid: "26152F8F",
                updated: 1367539068016,
                website: "http://5secondrule.typepad.com/my_weblog/"
              }, {
                id: "feed/http://feed.500px.com/500px-editors",
                title: "500px: Editors' Choice",
                categories: [
                  {
                    id: "user/c805fcbf-3acf-4302-a97e-d82f9d7c897f/category/photography",
                    label: "photography"
                  }
                ],
                sortid: "26152F8F",
                updated: 1367539068016,
                website: "http://500px.com/editors"
              }
            ]);
          case "profile":
            return cacheCallback({
              id: "c805fcbf-3acf-4302-a97e-d82f9d7c897f",
              email: "jim.smith@gmail.com",
              givenName: "Jim",
              familyName: "Smith",
              picture: "img/download.jpeg",
              gender: "male",
              locale: "en",
              reader: "9080770707070700",
              google: "115562565652656565656",
              twitter: "jimsmith",
              facebook: "",
              wave: "2013.7"
            });
          case "categories":
            return cacheCallback([
              {
                id: "user/c805fcbf-3acf-4302-a97e-d82f9d7c897f/category/tech",
                label: "tech"
              }, {
                id: "user/c805fcbf-3acf-4302-a97e-d82f9d7c897f/category/design",
                label: "design"
              }
            ]);
          case "topics":
            return cacheCallback([
              {
                id: "user/c805fcbf-3acf-4302-a97e-d82f9d7c897f/topic/arduino",
                interest: "high",
                updated: 1367539068016,
                created: 1367539068016
              }, {
                id: "user/c805fcbf-3acf-4302-a97e-d82f9d7c897f/topic/rock climbing",
                interest: "low",
                updated: 1367539068016,
                created: 1367539068016
              }
            ]);
          case "preferences":
            return cacheCallback({
              autoMarkAsReadOnSelect: "50",
              "category/reviews/entryOverviewSize": "0",
              "subscription/feed/http://feeds.engadget.com/weblogsinc/engadget/entryOverviewSize": "4",
              "subscription/feed/http://www.yatzer.com/feed/index.php/hideReadArticlesFilter": "off",
              "category/photography/entryOverviewSize": "6",
              "subscription/feed/http://feeds.feedburner.com/venturebeat/entryOverviewSize.mobile": "1"
            });
        }
      } else {
        if (args) {
          url += "?" + _.map(args, function(v, k) {
            return k + "=" + v;
          }).join("&");
        }
        _console.debug("[Josh.FeedlyConsole] fetching %s.", url);
        request = {
          url: url,
          dataType: "json",
          headers: {
            Authorization: "OAuth " + _self.OAuth
          },
          xhrFields: {
            withCredentials: true
          }
        };
        return $.ajax(request).done(function(response, status, xhr) {
          var ratelimit;
          ratelimit = {
            remaining: parseInt(xhr.getResponseHeader("X-RateLimit-Remaining")),
            limit: parseInt(xhr.getResponseHeader("X-RateLimit-Limit")),
            authenticated: xhr.getResponseHeader("Authenticated") === "true"
          };
          $("#ratelimit").html(_self.shell.templates.rateLimitTemplate(ratelimit));
          if (ratelimit.remaining === 0) {
            alert("Whoops, you've hit the github rate limit. You'll need to authenticate to continue");
            _self.shell.deactivate();
            return null;
          }
          if (status !== "success") {
            return callback();
          }
          return cacheCallback(response);
        });
      }
    };
    initialize = function(evt) {
      insertShellUI();
      return getDir("/", function(node) {
        if (!node) {
          return err("could not initialize root directory");
        }
        _self.pathhandler.current = node;
        return _self.root = node;
      });
    };
    insertCSSLink = function(name) {
      return $("head").append($("<link/>", {
        rel: "stylesheet",
        type: "text/css",
        href: chrome.extension.getURL(name)
      }));
    };
    doInsertShellUI = function() {
      var feedlyconsole, file;
      observer.disconnect();
      file = "feedlyconsole.html";
      _console.debug("[feedlyconsole] injecting %s.", file);
      insertCSSLink("stylesheets/styles.css");
      insertCSSLink("stylesheets/jquery-ui.css");
      insertCSSLink("feedlyconsole.css");
      feedlyconsole = $("<div/>", {
        id: "feedlyconsole"
      }).load(chrome.extension.getURL(file), function() {
        _console.log("[feedlyconsole] loaded %s %O readline.attach %O.", file, $("#feedlyconsole"), this);
        Josh.config.readline.attach($("#shell-panel").get(0));
        return initializeUI();
      });
      return $("body").prepend(feedlyconsole);
    };
    mutationHandler = function(mutationRecords) {
      var _found;
      _found = false;
      return mutationRecords.forEach(function(mutation) {
        var attr, name, target, type, value;
        target = mutation.target;
        if (target.id === "box") {
          type = mutation.type;
          name = mutation.attributeName;
          attr = target.attributes.getNamedItem(name);
          value = "";
          if (attr !== null) {
            value = attr.value;
          }
          _console.debug("[feedlyconsole/observer] %s: [%s]=%s on %O", type, name, value, target);
          if (!_found && ((name === "class" && value.indexOf("wide") !== -1) || (name === "_pageid" && value.indexOf("rot21") !== -1))) {
            _console.debug("[feedlyconsole] mutation observer end %O", observer);
            _found = true;
            doInsertShellUI();
            return null;
          }
        }
      });
    };
    insertShellUI = function() {
      var config, target;
      if ($("#feedlyconsole").length === 0) {
        _console.debug("[feedlyconsole] mutation observer start");
        target = document;
        config = {
          attributes: true,
          subtree: true
        };
        _console.debug(target);
        _console.debug(observer);
        _console.debug(config);
        return observer.observe(target, config);
      }
    };
    getDir = function(path, callback) {
      var command, handler, name, node, parts;
      node = void 0;
      name = void 0;
      if (path && path.length > 1 && path[path.length - 1] === "/") {
        path = path.substr(0, path.length - 1);
      }
      if (!path || (path.length === 1 && path === "/")) {
        name = "/";
        node = {
          name: "/",
          path: path,
          children: makeRootNodes()
        };
        _console.debug("[Josh.FeedlyConsole] root node %O.", node);
        return callback(node);
      } else {
        parts = getPathParts(path);
        if (parts[0] === "") {
          parts = parts.slice(1);
        }
        name = parts[0];
        handler = _self.root_commands[name];
        if (handler === undefined) {
          return callback();
        } else if (parts.length === 1) {
          node = {
            name: name,
            path: path,
            children: null
          };
          command = handler.exec;
          return command("", "", function(map) {
            var json;
            json = _self[name];
            _console.debug("[Josh.FeedlyConsole] json to nodes %O.", json);
            node.children = makeJSONNodes(path, json, name);
            return callback(node);
          });
        } else {
          _console.debug("[Josh.FeedlyConsole] not implemented, path: %s, name %s", path, name);
          get("streams/");
          return callback(undefined);
        }
      }
    };
    getPathParts = function(path) {
      var parts;
      parts = path.split("/");
      if (parts[parts.length - 1] === "") {
        return parts.slice(0, parts.length - 1);
      }
      return parts;
    };
    makeNodes = function(children) {
      _console.debug("[Josh.FeedlyConsole] makeNodes %O.", children);
      return _.map(children, function(node) {
        return {
          name: node.name,
          path: "/" + node.path,
          isFile: node.type === "leaf"
        };
      });
    };
    makeJSONNodes = function(path, children, type) {
      var nodes;
      if (_.isArray(children)) {
        nodes = _.map(children, function(item) {
          var name;
          name = item.label || item.title || item.id;
          return $.extend({
            name: name,
            path: path + "/" + name,
            isFile: type === "leaf"
          }, item);
        });
        return nodes;
      } else {
        return _.map(children, function(value, key) {
          var name;
          name = [key, value].join(":");
          return {
            name: name,
            path: path + "/" + name,
            isFile: type === "leaf"
          };
        });
      }
    };
    makeRootNodes = function() {
      return _.map(_self.root_commands, function(value, key, list) {
        return {
          name: key,
          path: "/" + key,
          type: "command",
          isFile: "command" === "leaf"
        };
      });
    };
    initializationError = function(context, msg) {
      return _console.error("[%s] failed to initialize: %s.", context, msg);
    };
    initializeUI = function() {
      var $consolePanel, $consoletab, activateAndShow, hideAndDeactivate, toggleActivateAndShow;
      toggleActivateAndShow = function() {
        if (_self.shell.isActive()) {
          return hideAndDeactivate();
        } else {
          return activateAndShow();
        }
      };
      activateAndShow = function() {
        $consoletab.slideUp();
        _self.shell.activate();
        $consolePanel.slideDown();
        return $consolePanel.focus();
      };
      hideAndDeactivate = function() {
        _self.shell.deactivate();
        $consolePanel.slideUp();
        $consolePanel.blur();
        return $consoletab.slideDown();
      };
      _console.log("[Josh.FeedlyConsole] initializeUI.");
      $consoletab = $("#consoletab");
      if ($consoletab.length === 0) {
        console.error("failed to find %s", $consoletab.selector);
      }
      $consoletab.hover((function() {
        $consoletab.addClass("consoletab-hover");
        return $consoletab.removeClass("consoletab");
      }), function() {
        $consoletab.removeClass("consoletab-hover");
        return $consoletab.addClass("consoletab");
      });
      $consoletab.click(function() {
        return activateAndShow();
      });
      $consolePanel = $("#shell-container");
      $consolePanel.resizable({
        handles: "s"
      });
      $(document).on("keypress", (function(event) {
        if (_self.shell.isActive()) {
          return;
        }
        if (event.keyCode === 126) {
          event.preventDefault();
          return activateAndShow();
        }
      }));
      _self.ui.toggleActivateAndShow = toggleActivateAndShow;
      _self.ui.activateAndShow = activateAndShow;
      _self.ui.hideAndDeactivate = hideAndDeactivate;
      _self.shell.onEOT(hideAndDeactivate);
      return _self.shell.onCancel(hideAndDeactivate);
    };
    observer = new MutationObserver(mutationHandler);
    _console.log("[Josh.FeedlyConsole] initialize.");
    initialize();
    if (chrome.runtime !== undefined) {
      chrome.runtime.onMessage.addListener(function(request, sender, sendResponse) {
        var url, url_array;
        _console.debug("[feedlyconsole] msg: %s.", request.msg);
        if (request.action === "icon_active") {
          url_array = request.url.split("/");
          url = url_array[0] + "//" + url_array[2] + "/" + _self.api_version;
          _console.debug("[feedlyconsole] set api url: %s.", url);
          _self.api = url;
        } else if (request.action === "toggle_console") {
          if (_self.ui.toggleActivateAndShow === undefined) {
            window.console.warn("[feedlyconsole] ui not yet ready");
          } else {
            _self.ui.toggleActivateAndShow();
          }
        } else if (request.action === "cookie_feedlytoken") {
          _self.OAuth = request.feedlytoken;
          _console.debug("[feedlyconsole] token %s...", _self.OAuth.slice(0, 8));
        } else {
          _console.debug("[feedlyconsole] unknown action %s request %O.", request.action, request);
        }
        return sendResponse({
          action: "ack"
        });
      });
    } else {
      $(document).ready(function() {
        initializeUI();
        return _self.ui.activateAndShow();
      });
    }
    return _self;
  })(root, $, _);
})(this, $, _);

console.log("[feedlyconsole] loaded %O.", Josh);

/*
//@ sourceMappingURL=feedlyconsole.map
*/
